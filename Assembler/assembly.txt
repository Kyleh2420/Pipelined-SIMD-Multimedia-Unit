//R3 = 0x0000_5678 (In the 3rd long) 
//R2 = 0x0000_7812 (In the 3rd long) 
//R1 = 0x12345678 (In the 3rd long)  
//Expect Rd = 0x3AC2AAE8 (In the 3rd long)
li r3, 1, 0x5678
//This is a data hazard.
//R3 -> R3
bcw r3, r3
li r2, 6, 0x7812
li r1, 7, 0x1234
li r1, 6, 0x5678
SIMAL r0, r1, r2, r3


//Now testing Cnt1h
//This should also result in Data Hazard
//Hazard li -> li
//R1 gets   0xF000_5678_000F_4040_FEB4_0000_000F_4240
//Expect Rd = 0004_0008_0004_0002_000B_0000_0004_0003
li r1, 7, 0xF000
li r1, 6, 0x5678
li r1, 5, 0x000F
li r1, 4, 0x4040
li r1, 3, 0xFEB4
li r1, 2, 0x0000
li r1, 1, 0x000F
li r1, 0, 0x4240
cnt1h r2, r1


//R3 = 0x5678_0000_5678_0000_5678_0000_5678_0000
//R1 = 0xF000_5678_000F_4040_FEB4_0000_000F_4240
//Rd = 0xF678_5678_567F_4040_FEFC_0000_567F_4240
or r4, r1, r3


//R3 = 0xF000_5678_000F_4040_FEB4_0000_000F_4240
//R1 = 0xF678_5678_567F_4040_FEFC_0000_567F_4240
//Rd = 0xF000_5678_000F_4040_FEB4_0000_000F_4240
and r5, r4, r1


//With this, expect r6 to be 
//Rd = 0x0FFF_A987_FFF0_BFBF_014B_FFFF_FFF0_BDBF
invb r6, r5


//This r7 should be a 0 here
and r7, r6, r5
//R2 = 0xF000_5678_000F_4040_FEB4_0000_000F_4240
//r1 = 0x0FFF_A987_FFF0_BFBF_014B_FFFF_FFF0_BDBF
//rd = 0x0FFF_A987_000F_4040_014B_FFFF_000F_4240
maxws r7, r6, r5

//Lets throw in a nop just for the hell of it
nop

//R2 = 0xF000_5678_000F_4040_FEB4_0000_000F_4240
//r1 = 0x0FFF_A987_FFF0_BFBF_014B_FFFF_FFF0_BDBF
//rd = 0xF000_5678_FFF0_BFBF_FEB4_0000_FFF0_BDBF
minws r8, r6, r5


//R1 = 0x0FFF_A987_FFF0_BFBF_014B_FFFF_FFF0_BDBF
//Rd = 0x000C_0008_000C_000E_0005_0010_000C_000D
cnt1h r9, r6


//Rotate by 8, 14, 16, 13
//R2 = 0x000C00_08_000C00_0E_000500_10_000C00_0D
//R1 = 0x0FFFA987_FFF0BFBF_014BFFFF_FFF0BDBF
//Rd = 0x870FFFA9_FEFFFFC2_FFFF014B_EDFFFF85
rotw r10, r6, r9


//Shift all by 9
//R1 = 0x0FFF_A987_FFF0_BFBF_014B_FFFF_FFF0_BDBF
//Rd = 0x0007_0054_007F_005F_0000_007F_007F_005E
shrhi r11, r6, 9


//Testing the au: Add word unsigned
//Encompasses all conditions
//Rs2 = 0x00000005_00007FFF_00008000_00001AB5
//Rs1 = 0x00000007_00000005_00008000_00009263
// Rd = 0x000C7FFF_8000AD18_00008000_8000AD18
li r31, 0, 0x1AB5
li r31, 2, 0x8000
li r31, 4, 0x7FFF
li r31, 6, 0x0005
li r30, 0, 0x9263
li r30, 2, 0x8000
li r30, 4, 0x0005
li r30, 6, 0x0007
ahs r29, r31, r30

//Testing the au: Add Unsigned
//Encompasses all conditions
//Rs2 = 0x65432101_00000000_7FFFFFFF_000C0000
//Rs1 = 0x65432101_00000000_00000000_000F4240
// Rd = 0xCA864202_00000000_7FFFFFFF_001B4240
li r28, 7, 0x6543
li r28, 6, 0x2101
li r28, 3, 0x7FFF
li r28, 2, 0xFFFF
li r28, 1, 0x000C
li r28, 0, 0x0000
//r25 has not been used yet. It is still all 0s
//Use it to copy r28 to r27
or r27, r28, r25
li r27, 1, 0x000F
li r27, 0, 0x4240
au r26, r27, r28

//Testing MLHU
//Rs2: 0x0FFFA987_FFF0BFBF_014BFFFF_FFF0BDBF
//Rs1: 0xF0005678_000F4040_FEB40000_000F4240
// Rd: 0x3942D148_301FAFC0_00000000_311AADC0(Expected)
mlhu r12, r1, r6


//Testing R4 Instruction: SIMSH
//Rs3: 5
//Rs2: 5
//Rs1: 3
// Rd: 22
li r17, 1, 0x0005
bcw r17, r17
li r16, 0, 0x0003  
bcw r16, r16     
SIMSH r15, r16, r17, r17

//Testing R4 Instruction: simah
//Expect: 28
SIMAH r18, r16, r17, r17

//Testing R4 Instruction: simah
//Expect: 28
SIMAH r18, r16, r17, r17

//Testing R4 Instruction: simsl
//Rs3: 0x0000001C0000001C0000001C0000001C 
//Rs2: 0x0000001C0000001C0000001C0000001C 
//Rs1: 0x00000003000000030000000300000003
//0x0310-0x0003=0x030D
//Rd: 0x030D
simsl r13, r16, r18, r18

//Testing R3 Instruction: MLHSS
//Rs2: 0x3942_D148_301F_AFC0_0000_0000_311A_ADC0
//Rs1: 0x870F_FFA9_FEFF_FFC2_FFFF_014B_EDFF_FF85
// Rd: 0x870F_0057_FEFF_003E_0000_0000_EDFF_007B
MLHSS r19, r10, r12

//Testing R4 Instruction: slmal
//Rs3: 0x00000003_00000003_00000003_00000003
//Rs2: 0x00000003_00000003_00000003_00000003
//Rs1: 0x0000001600000016_0000001600000016
// Rd: 0x000000160000001F_000000160000001F
slmal r20, r15, r16, r16

//Testing R4 Instruction: slmah
//Rs3: 0x00000003_00000003_00000003_00000003
//Rs2: 0x00000003_00000003_00000003_00000003
//Rs1: 0x0000001600000016_0000001600000016
// Rd: 0x000000160000001F_000000160000001F
slmal r21, r15, r16, r16

//Testing R4 Instruction: slmsl
//Rs3: 0x00000016_0000001F_00000016_0000001F
//Rs2: 0x00000016_0000001F_00000016_0000001F
//Rs1: 0x0000000000000016_0000000000000016
// Rd: 0x00000000000003AB_00000000000003AB
li r15, 2, 0x0000
li r15, 6, 0x0000
slmsl r22, r15, r21, r21

//Testing R4 Instruction: slmsh
//Rs3: 0x00000016_0000001F_00000016_0000001F
//Rs2: 0x00000016_0000001F_00000016_0000001F
//Rs1: 0x0000000000000016_0000000000000016
// Rd: 0x00000000000001CE_00000000000001CE
slmsh r23, r15, r21, r21

//testing R3 Instruction: SFWU
//Rs2: 0x00000000000001CE_00000000000001CE
//Rs1: 0x0000000000000016_0000000000000016
//Rd: 0x00000000000001B800000000000001B8
sfwu r24, r15, r23

nop
nop

//testing R3 Instruction: SFWU
//Rs2: 0x000C_0008_000C_000E_0005_0010_000C_000D
//Rs1: 0x0004_0008_0004_0002_000B_0000_0004_0003
//Rd: 0x0008_0000_0008_000C_0005_FFF0_0008_000A
sfwu r25, r2, r9 